{"version":3,"sources":["components/CustomNavBar.js","components/JumbotronComponent.js","components/Botones.js","components/LayoutSeleccionarMoneda.js","components/Resultados.js","App.js","ObtenerFechaActual.js","index.js"],"names":["CustomNavBar","Navbar","bg","variant","Brand","href","Nav","className","Link","JumbotronComponent","Container","fluid","Jumbotron","Botones","indexMonedaSeleccionada","obtenerLatest","selectedDate","handleChange","Row","Col","to","onClick","e","length","preventDefault","alert","Button","ToggleButtonGroup","type","value","onChange","size","ToggleButton","LayoutSeleccionarMoneda","monedas","dates","loading","handleDate","handleMonedaSeleccionada","minDate","Date","setDate","setYear","setMonth","noGutters","Object","keys","map","moneda","index","name","Number","ddmmyyyyToday","selected","dateFormat","maxDate","isClearable","showYearDropdown","showMonthDropdown","scrollableYearDropdown","Resultados","useState","resultados","setResultados","setLoading","showDate","setShowDate","useEffect","a","fetch","BASE_URL","url","json","response","console","error","fetchLatest","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","date","fetchDate","base","Table","striped","bordered","hover","rates","App","setMonedas","setMonedaSeleccionada","setDates","setSelectedDate","setObtenerLatest","today","yyyymmddToday","min","ObtenerFechaActual","exact","path","val","render","props","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9484354e.chunk.js","sourcesContent":["import { React, Fragment } from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\n\r\nexport const CustomNavBar = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">Exchange rates API</Navbar.Brand>\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"#about\">About</Nav.Link>\r\n        </Nav>\r\n      </Navbar>\r\n      <br />\r\n    </Fragment>\r\n  );\r\n};\r\n","import { React, Fragment } from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport const JumbotronComponent = () => {\r\n  return (\r\n    <Fragment>\r\n      <Container fluid>\r\n        <Jumbotron fluid className=\"bg-primary text-white\">\r\n          <Container fluid>\r\n            <h1>Hola!</h1>\r\n            <p className=\"lead\">\r\n              Esta aplicación muestra tasas de cambio para monedas extranjeras.\r\n            </p>\r\n            <hr className=\"my-4\" />\r\n          </Container>\r\n        </Jumbotron>\r\n        <Container fluid>\r\n          <p>Selecciona a continuación una moneda:</p>\r\n        </Container>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { React, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\n\r\nexport const Botones = ({\r\n  indexMonedaSeleccionada,\r\n  obtenerLatest,\r\n  selectedDate,\r\n  handleChange,\r\n}) => {\r\n  const linkTo = \"/resultados\";\r\n  return (\r\n    <Fragment>\r\n      <Row className=\"py-3\">\r\n        <Col>\r\n          <Link\r\n            to={linkTo}\r\n            onClick={(e) => [\r\n              obtenerLatest.length === 0 && selectedDate === null\r\n                ? (e.preventDefault(),\r\n                  alert(\r\n                    \"Selecciona una fecha o marcá la opción de obtener tasa más reciente\"\r\n                  ))\r\n                : null,\r\n              indexMonedaSeleccionada === null &&\r\n              (selectedDate !== null || obtenerLatest.length !== 0)\r\n                ? (e.preventDefault(), alert(\"Selecciona una moneda!\"))\r\n                : null,\r\n            ]}\r\n          >\r\n            <Button variant=\"outline-primary\">Obtener cambios</Button>\r\n          </Link>\r\n        </Col>\r\n        <Col>\r\n          <ToggleButtonGroup\r\n            type=\"checkbox\"\r\n            value={obtenerLatest}\r\n            onChange={handleChange}\r\n            size=\"sm\"\r\n          >\r\n            <ToggleButton\r\n              value={1}\r\n              variant=\"outline-primary\"\r\n              className=\"btn-optional\"\r\n            >\r\n              Obtener sólo la tasa más reciente\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { React, Fragment } from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Botones } from \"./Botones\";\r\n\r\nexport const LayoutSeleccionarMoneda = ({\r\n  monedas,\r\n  indexMonedaSeleccionada,\r\n  obtenerLatest,\r\n  dates,\r\n  selectedDate,\r\n  loading,\r\n  handleChange,\r\n  handleDate,\r\n  handleMonedaSeleccionada,\r\n}) => {\r\n  const minDate = new Date();\r\n  minDate.setDate(\"04\");\r\n  minDate.setYear(\"99\");\r\n  minDate.setMonth(\"01\");\r\n\r\n  return (\r\n    <Fragment>\r\n      <Container>\r\n        <Row noGutters={true}>\r\n          {Object.keys(monedas).map((moneda, index) => (\r\n            <ToggleButtonGroup\r\n              type=\"radio\"\r\n              value={moneda}\r\n              onChange={handleMonedaSeleccionada}\r\n              name={moneda}\r\n              className=\"toggleButtonGroup\"\r\n              key={moneda}\r\n            >\r\n              <ToggleButton\r\n                value={Number(index + 1)}\r\n                key={moneda}\r\n                variant=\"outline-primary\"\r\n                className=\"btn-custom\"\r\n              >\r\n                {monedas[index]}\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          ))}\r\n        </Row>\r\n      </Container>\r\n\r\n      <Container fluid>\r\n        <p>\r\n          Seleccioná una fecha válida, desde 04-01-1999 al {dates.ddmmyyyyToday}\r\n          , o marcá la opción para obtener los últimos cambios:\r\n        </p>\r\n      </Container>\r\n\r\n      <Container>\r\n        <DatePicker\r\n          selected={selectedDate}\r\n          onChange={handleDate}\r\n          dateFormat=\"dd/MM/yyyy\"\r\n          minDate={minDate}\r\n          maxDate={new Date()}\r\n          isClearable\r\n          showYearDropdown\r\n          showMonthDropdown\r\n          scrollableYearDropdown\r\n        />\r\n\r\n        <Botones\r\n          indexMonedaSeleccionada={indexMonedaSeleccionada}\r\n          obtenerLatest={obtenerLatest}\r\n          selectedDate={selectedDate}\r\n          handleChange={handleChange}\r\n        />\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n","import { React, useEffect, useState } from \"react\";\r\nimport { BASE_URL } from \"../App\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport const Resultados = ({\r\n  monedas,\r\n  indexMonedaSeleccionada,\r\n  selectedDate,\r\n}) => {\r\n  const [resultados, setResultados] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showDate, setShowDate] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (selectedDate === null) {\r\n      const fetchLatest = async () => {\r\n        const url = await fetch(\r\n          BASE_URL + \"latest?base=\" + monedas[indexMonedaSeleccionada - 1]\r\n        );\r\n        const response = await url.json();\r\n        try {\r\n          setResultados(response);\r\n          setLoading(false);\r\n        } catch (e) {\r\n          setLoading(true);\r\n          console.error(e);\r\n        }\r\n      };\r\n      fetchLatest();\r\n    } else {\r\n      let dd = String(selectedDate.getDate()).padStart(2, \"0\");\r\n      let mm = String(selectedDate.getMonth() + 1).padStart(2, \"0\");\r\n      let yyyy = selectedDate.getFullYear();\r\n\r\n      let date = `${yyyy}-${mm}-${dd}`;\r\n      setShowDate(`${dd}-${mm}-${yyyy}`);\r\n\r\n      const fetchDate = async () => {\r\n        const url = await fetch(\r\n          BASE_URL + `${date}?base=` + monedas[indexMonedaSeleccionada - 1]\r\n        );\r\n        const response = await url.json();\r\n        try {\r\n          setResultados(response);\r\n          setLoading(false);\r\n        } catch (e) {\r\n          setLoading(true);\r\n          console.error(e);\r\n        }\r\n      };\r\n      fetchDate();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        {loading || resultados === [] ? (\r\n          <div>Cargando resultados...</div>\r\n        ) : (\r\n          <Container>\r\n            {selectedDate === null ? (\r\n              <h1>Resultados más recientes para {resultados.base}: </h1>\r\n            ) : (\r\n              <h1>\r\n                Resultados para {resultados.base} a la fecha {showDate}\r\n              </h1>\r\n            )}\r\n            <Table striped bordered hover>\r\n              <thead>\r\n                <tr>\r\n                  <th>Moneda</th>\r\n                  <th>Valor</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(resultados.rates).map((moneda) => {\r\n                  return (\r\n                    <tr key={moneda}>\r\n                      <td>{moneda}</td>\r\n                      <td>{resultados.rates[moneda]}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </Container>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { React, useState, useEffect } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { CustomNavBar } from \"./components/CustomNavBar\";\r\nimport { JumbotronComponent } from \"./components/JumbotronComponent\";\r\nimport { LayoutSeleccionarMoneda } from \"./components/LayoutSeleccionarMoneda\";\r\nimport { Resultados } from \"./components/Resultados\";\r\nimport { ObtenerFechaActual } from \"./ObtenerFechaActual\";\r\n\r\nexport const BASE_URL = \"https://api.exchangeratesapi.io/\";\r\n\r\nfunction App() {\r\n  // const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  const [monedas, setMonedas] = useState([]);\r\n  const [indexMonedaSeleccionada, setMonedaSeleccionada] = useState(null);\r\n\r\n  const [dates, setDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [obtenerLatest, setObtenerLatest] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setDates(ObtenerFechaActual());\r\n    const fetchLatest = async () => {\r\n      const url = await fetch(BASE_URL + \"latest\");\r\n      const response = await url.json();\r\n      setMonedas([response.base, ...Object.keys(response.rates)]);\r\n    };\r\n\r\n    try {\r\n      setLoading(true);\r\n      fetchLatest();\r\n      setLoading(false);\r\n    } catch (e) {\r\n      setLoading(true);\r\n      console.error(e);\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (val) => {\r\n    setObtenerLatest(val);\r\n  };\r\n  const handleDate = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const handleMonedaSeleccionada = (e) => {\r\n    setMonedaSeleccionada(e);\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <CustomNavBar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <JumbotronComponent />\r\n          {loading ? (\r\n            <div>Cargando...</div>\r\n          ) : (\r\n            <LayoutSeleccionarMoneda\r\n              monedas={monedas}\r\n              indexMonedaSeleccionada={indexMonedaSeleccionada}\r\n              obtenerLatest={obtenerLatest}\r\n              dates={dates}\r\n              selectedDate={selectedDate}\r\n              loading={loading}\r\n              handleChange={handleChange}\r\n              handleDate={handleDate}\r\n              handleMonedaSeleccionada={handleMonedaSeleccionada}\r\n            />\r\n          )}\r\n        </Route>\r\n\r\n        <Route\r\n          exact\r\n          path=\"/resultados\"\r\n          render={(props) => (\r\n            <Resultados\r\n              {...props}\r\n              monedas={monedas}\r\n              indexMonedaSeleccionada={indexMonedaSeleccionada}\r\n              selectedDate={selectedDate}\r\n            />\r\n          )}\r\n        />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const ObtenerFechaActual = () => {\r\n  let today = new Date();\r\n\r\n  let dd = String(today.getDate()).padStart(2, \"0\");\r\n  let mm = String(today.getMonth() + 1).padStart(2, \"0\");\r\n  let yyyy = today.getFullYear();\r\n\r\n  let dates = {\r\n    ddmmyyyyToday: `${dd}-${mm}-${yyyy}`,\r\n    yyyymmddToday: `${yyyy}-${mm}-${dd}`,\r\n    min: `04-01-1999`, // <-  format '%Y-%m-%d\r\n  };\r\n\r\n  return dates;\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}